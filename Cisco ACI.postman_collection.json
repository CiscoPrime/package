{
	"info": {
		"_postman_id": "a4cdc93a-2b91-4815-9344-0ea082672c8d",
		"name": "Cisco ACI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20610832",
		"_collection_link": "https://www.postman.com/hsabale/public-collection/collection/93ylw8h/cisco-aci?action=share&source=collection_link&creator=20610832"
	},
	"item": [
		{
			"name": "1. Login into APIC First",
			"item": [
				{
					"name": "Login-json-aaa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonData.imdata[0].aaaLogin.attributes.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aaaUser\": {\r\n    \"attributes\": {\r\n      \"name\": \"{{username}}\",\r\n      \"pwd\": \"{{password}}\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/aaaLogin.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"aaaLogin.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Tenant Related Config",
			"item": [
				{
					"name": "Create Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fvTenant\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/tn-{{tenant}}\",\r\n      \"name\": \"{{tenant}}\",\r\n      \"rn\": \"tn-{{tenant}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create VRF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fvCtx\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/tn-{{tenant}}/ctx-{{vrf}}\",\r\n      \"name\": \"{{vrf}}\",\r\n      \"rn\": \"ctx-{{vrf}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bridge Domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fvBD\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/tn-{{tenant}}/BD-{{bd}}\",\r\n      \"name\": \"{{bd}}\",\r\n      \"rn\": \"BD-{{bd}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": [\r\n      {\r\n        \"fvRsCtx\": {\r\n          \"attributes\": {\r\n            \"tnFvCtxName\": \"{{vrf}}\",\r\n            \"status\": \"created,modified\"\r\n          },\r\n          \"children\": []\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fvAp\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}\",\r\n      \"name\": \"{{anp}}\",\r\n      \"rn\": \"ap-{{anp}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Endpoint Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fvAEPg\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}\",\r\n      \"prio\": \"level3\",\r\n      \"name\": \"{{epg}}\",\r\n      \"rn\": \"epg-{{epg}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": [\r\n      {\r\n        \"fvRsBd\": {\r\n          \"attributes\": {\r\n            \"tnFvBDName\": \"{{bd}}\",\r\n            \"status\": \"created,modified\"\r\n          },\r\n          \"children\": []\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create EPG Static Bind - Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fvRsPathAtt\": {\n    \"attributes\": {\n      \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]\",\n      \"encap\": \"vlan-{{vlan}}\",\n      \"instrImedcy\": \"{{instrImedcy}}\",\n      \"mode\": \"{{mode}}\",\n      \"tDn\": \"topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]\",\n      \"rn\": \"rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create EPG Static Bind - Port-Methond2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fvRsPathAtt\": {\n    \"attributes\": {\n      \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]\",\n      \"encap\": \"vlan-{{vlan}}\",\n      \"instrImedcy\": \"{{instrImedcy}}\",\n      \"mode\": \"{{mode}}\",\n      \"tDn\": \"topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]\",\n      \"rn\": \"rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]].json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"ap-{{anp}}",
								"epg-{{epg}}",
								"rspathAtt-[topology",
								"pod-{{pod}}",
								"paths-{{node}}",
								"pathep-[eth{{port}}]].json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create EPG Static Bind - PC/VPC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fvRsPathAtt\": {\n    \"attributes\": {\n      \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[{{ipg}}]]\",\n      \"encap\": \"vlan-{{vlan}}\",\n      \"instrImedcy\": \"{{instrImedcy}}\",\n      \"mode\": \"{{mode}}\",\n      \"tDn\": \"topology/pod-{{pod}}/paths-{{node}}/pathep-[{{ipg}}]\",\n      \"rn\": \"rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[{{ipg}}]]\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Defining Interface Policies",
			"item": [
				{
					"name": "Create CDP Policy - Enable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cdpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/cdpIfP-CDP-ENABLE\",\n      \"name\": \"CDP-ENABLE\",\n      \"adminSt\": \"enabled\",\n      \"rn\": \"cdpIfP-CDP-ENABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CDP Policy - Disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cdpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/cdpIfP-CDP-DISABLE\",\n      \"name\": \"CDP-DISABLE\",\n      \"adminSt\": \"disabled\",\n      \"rn\": \"cdpIfP-CDP-DISABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create STP Policy - Enable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"stpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/ifPol-STP-ENABLE\",\n      \"name\": \"STP-ENABLE\",\n      \"ctrl\": \"bpdu-filter,bpdu-guard\",      \n      \"rn\": \"ifPol-STP-ENABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create STP Policy - Disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"stpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/ifPol-STP-DISABLE\",\n      \"name\": \"STP-DISABLE\",\n      \"rn\": \"ifPol-STP-DISABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LLDP Policy - Disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lldpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/lldpIfP-LLDP_Off\",\n      \"name\": \"LLDP_Off\",\n      \"adminRxSt\": \"disabled\",\n      \"adminTxSt\": \"disabled\",\n      \"rn\": \"lldpIfP-LLDP_Off\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LLDP Policy - Enable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lldpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/lldpIfP-LLDP_ON\",\n      \"name\": \"LLDP_ON\",\n      \"rn\": \"lldpIfP-LDPP_ON\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create MCP Policy - Enable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mcpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/mcpIfP-MCP-ENABLE\",\n      \"name\": \"MCP-ENABLE\",\n      \"rn\": \"mcpIfP-MCP-ENABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create MCP Policy - Disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mcpIfPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/mcpIfP-MCP-DISABLE\",\n      \"name\": \"MCP-DISABLE\",\n      \"adminSt\":\"disabled\",\n      \"rn\": \"mcpIfP-MCP-DISABLE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LACP Policy - Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lacpLagPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/lacplagp-LACPACTIVE\",\n      \"ctrl\": \"fast-sel-hot-stdby,graceful-conv,susp-individual\",\n      \"name\": \"LACPACTIVE\",\n      \"mode\": \"active\",\n      \"rn\": \"lacplagp-LACPACTIVE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LACP Policy - Passive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lacpLagPol\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/lacplagp-LACPPASSIVE\",\n      \"ctrl\": \"fast-sel-hot-stdby,graceful-conv,susp-individual\",\n      \"name\": \"LACPPASSIVE\",\n      \"mode\": \"active\",\n      \"rn\": \"lacplagp-LACPPASSIVE\",\n      \"status\": \"created\"\n    },\n    \"children\": []\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Troubleshooting",
			"item": [
				{
					"name": "Get Unreachable Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/fabricLooseNode.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"fabricLooseNode.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unmanaged Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/fabricLooseNode.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"fabricLooseNode.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fabric Membership",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/topSystem.json?query-target=subtree&target-subtree-class=firmwareCtrlrRunning",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"topSystem.json"
							],
							"query": [
								{
									"key": "query-target",
									"value": "subtree"
								},
								{
									"key": "target-subtree-class",
									"value": "firmwareCtrlrRunning"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Overall Fabric Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/topology/HDfabricOverallHealth5min-0.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"topology",
								"HDfabricOverallHealth5min-0.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fault Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/faultSummary.json?order-by=faultSummary.severity|desc&page=0&page-size=15",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"faultSummary.json"
							],
							"query": [
								{
									"key": "order-by",
									"value": "faultSummary.severity|desc"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "page-size",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Query Specific Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"tagAnnotation\":{\"attributes\":{\"key\":\"Location\",\"value\":\"SF1-A6\"},\"children\":[]}}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/topology/pod-{{pod}}/node-{{node}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"topology",
								"pod-{{pod}}",
								"node-{{node}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenant Fault Counts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/mo/uni/tn-{{tenant}}/fltCnts.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"fltCnts.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenant Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/mo/uni/tn-{{tenant}}/health.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"health.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Proc on APIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/topology/pod-{{pod}}/node-{{node}}/procEntry.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"topology",
								"pod-{{pod}}",
								"node-{{node}}",
								"procEntry.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node Annotation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tagAnnotation\": {\r\n    \"attributes\": {\r\n      \"key\": \"Location\",\r\n      \"value\": \"SF1-A6\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/topology/pod-{{pod}}/node-{{node}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"topology",
								"pod-{{pod}}",
								"node-{{node}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/fabricNode.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"fabricNode.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Interface Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/infraAccPortP.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"infraAccPortP.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Interface Profile Selector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/infraHPortS.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"infraHPortS.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Switch Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/infraNodeP.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"infraNodeP.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Switch Profile Selector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/infraLeafS.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"infraLeafS.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Interface details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/l1PhysIf.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"l1PhysIf.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Interface Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/mcpIf.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"mcpIf.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get VPC Protection Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/fabric/protpol.json?query-target=children",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"fabric",
								"protpol.json"
							],
							"query": [
								{
									"key": "query-target",
									"value": "children"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cluster Health - APIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/topology/pod-1/node-1/av.json?query-target=children&target-subtree-class=infraWiNode",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"topology",
								"pod-1",
								"node-1",
								"av.json"
							],
							"query": [
								{
									"key": "query-target",
									"value": "children"
								},
								{
									"key": "target-subtree-class",
									"value": "infraWiNode"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CPU & Memory - APIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/api/class/procEntity.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"class",
								"procEntity.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Disk Utilization - APIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/api/class/eqptStorage.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"class",
								"eqptStorage.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CPU - SpineLeaf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/api/class/procSysCPU5min.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"class",
								"procSysCPU5min.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CDP Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/cdpIfPol.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"cdpIfPol.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strom Contol Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/api/node/class/stormctrlIfPol.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"class",
								"stormctrlIfPol.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Fabric Policies Config",
			"item": [
				{
					"name": "Set Node Annotation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tagAnnotation\": {\r\n    \"attributes\": {\r\n      \"key\": \"{{key}}\",\r\n      \"value\": \"{{value}}\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/topology/pod-{{pod}}/node-{{node}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"topology",
								"pod-{{pod}}",
								"node-{{node}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Access Policies Config",
			"item": [
				{
					"name": "Create Interface Port Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"infraAccPortGrp\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/funcprof/accportgrp-{{ipgname}}\",\n      \"name\": \"{{ipgname}}\",\n      \"rn\": \"accportgrp-{{ipgname}}\",\n      \"status\": \"created\"\n    },\n    \"children\": [\n      {\n        \"infraRsAttEntP\": {\n          \"attributes\": {\n            \"tDn\": \"uni/infra/attentp-{{aep}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsMcpIfPol\": {\n          \"attributes\": {\n            \"tnMcpIfPolName\": \"{{mcp}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsCdpIfPol\": {\n          \"attributes\": {\n            \"tnCdpIfPolName\": \"{{cdp}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsStormctrlIfPol\": {\n          \"attributes\": {\n            \"tnStormctrlIfPolName\": \"{{stormcontrol}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsStpIfPol\": {\n          \"attributes\": {\n            \"tnStpIfPolName\": \"{{stp}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsHIfPol\": {\n          \"attributes\": {\n            \"tnFabricHIfPolName\": \"{{speed}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsLldpIfPol\": {\n          \"attributes\": {\n            \"tnLldpIfPolName\": \"{{lldp}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/funcprof/accportgrp-{{ipgname}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"funcprof",
								"accportgrp-{{ipgname}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create VLAN Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fvnsVlanInstP\": {\n        \"attributes\": {\n            \"dn\": \"uni/infra/vlanns-[{{vlan_pool_name}}]-{{vlan_pool_alloc}}\",\n            \"name\": \"{{vlan_pool_name}}\",\n            \"descr\": \"{{vlan_pool_desc}}\",\n            \"allocMode\": \"{{vlan_pool_alloc}}\",\n            \"status\": \"created\"\n        },\n        \"children\": [\n            {\n                \"fvnsEncapBlk\": {\n                    \"attributes\": {\n                        \"dn\": \"uni/infra/vlanns-[{{vlan_pool_name}}]-{{vlan_pool_alloc}}/from-[vlan-{{vlan_pool_encap_block_from}}]-to-[vlan-{{vlan_pool_encap_block_to}}]\",\n                        \"descr\": \"{{vlan_pool_encap_desc}}\",\n                        \"from\": \"vlan-{{vlan_pool_encap_block_from}}\",\n                        \"to\": \"vlan-{{vlan_pool_encap_block_to}}\",\n                        \"allocMode\": \"{{vlan_pool_alloc}}\",\n                        \"status\": \"created\"\n                    },\n                    \"children\": []\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/vlanns-[{{vlan_pool_name}}]-{{vlan_pool_alloc}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"vlanns-[{{vlan_pool_name}}]-{{vlan_pool_alloc}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Switch Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraNodeP\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/nprof-{{sw_prof_name}}\",\r\n      \"name\": \"{{sw_prof_name}}\",\r\n      \"descr\": \"{{sw_prof_descr}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bind Switch Selector to Switch Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraLeafS\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/nprof-{{sw_prof_name}}/leaves-{{sw_sel_name}}-typ-range\",\r\n      \"type\": \"range\",\r\n      \"name\": \"{{sw_sel_name}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": [\r\n      {\r\n        \"infraNodeBlk\": {\r\n          \"attributes\": {\r\n            \"from_\": \"{{NodeBlkfrom}}\",\r\n            \"to_\": \"{{NodeBlkto}}\",\r\n            \"name\": \"{{sw_sel_name}}\",\r\n            \"status\": \"created\"\r\n          },\r\n          \"children\": []\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}/leaves-{{sw_sel_name}}-typ-range.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}",
								"leaves-{{sw_sel_name}}-typ-range.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Interface Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraAccPortP\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/accportprof-{{int_prof_name}}\",\r\n      \"name\": \"{{int_prof_name}}\",\r\n      \"descr\": \"{{int_prof_descr}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/accportprof-{{int_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"accportprof-{{int_prof_name}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bind interface profile to switch profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraRsAccPortP\": {\r\n    \"attributes\": {\r\n      \"tDn\": \"uni/infra/accportprof-{{int_prof_name}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Interface Profile Selector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"infraHPortS\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range\",\n      \"name\": \"{{int_sel_name}}\",\n      \"descr\": \"{{int_sel_descr}}\",\n      \"rn\": \"hports-{{int_sel_name}}-typ-range\",\n      \"status\": \"created,modified\"\n    },\n    \"children\": [\n      {\n        \"infraPortBlk\": {\n          \"attributes\": {\n            \"dn\": \"uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range/portblk-block2\",\n            \"fromPort\": \"{{PortBlkfrom}}\",\n            \"toPort\": \"{{PortBlkto}}\",\n            \"name\": \"block2\",\n            \"rn\": \"portblk-block2\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsAccBaseGrp\": {\n          \"attributes\": {\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"accportprof-{{int_prof_name}}",
								"hports-{{int_sel_name}}-typ-range.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure Interface Profile Selector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"infraHPortS\": {\n    \"attributes\": {\n      \"dn\": \"uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range\",\n      \"name\": \"{{int_sel_name}}\",\n      \"descr\": \"{{int_sel_descr}}\",\n      \"rn\": \"hports-{{int_sel_name}}-typ-range\",\n      \"status\": \"created,modified\"\n    },\n    \"children\": [\n      {\n        \"infraPortBlk\": {\n          \"attributes\": {\n            \"dn\": \"uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range/portblk-block2\",\n            \"fromPort\": \"{{PortBlkfrom}}\",\n            \"toPort\": \"{{PortBlkto}}\",\n            \"name\": \"block2\",\n            \"descr\": \"{{PortBlkdescr}}\",\n            \"rn\": \"portblk-block2\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      },\n      {\n        \"infraRsAccBaseGrp\": {\n          \"attributes\": {\n            \"tDn\": \"uni/infra/funcprof/accportgrp-{{IPG}}\",\n            \"status\": \"created,modified\"\n          },\n          \"children\": []\n        }\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/accportprof-{{int_prof_name}}/hports-{{int_sel_name}}-typ-range.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"accportprof-{{int_prof_name}}",
								"hports-{{int_sel_name}}-typ-range.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. InterfaceShut_NoShut",
			"item": [
				{
					"name": "intshut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fabricRsOosPath\": {\r\n        \"attributes\": {\r\n            \"tDn\": \"topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]\",\r\n            \"lc\": \"blacklist\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/fabric/outofsvc.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"fabric",
								"outofsvc.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. New Node Onboarding",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonData.imdata[0].aaaLogin.attributes.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aaaUser\": {\r\n    \"attributes\": {\r\n      \"name\": \"{{username}}\",\r\n      \"pwd\": \"{{password}}\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/aaaLogin.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"aaaLogin.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "register switch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fabricNodeIdentP\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/controller/nodeidentpol/nodep-{{serialno}}\",\r\n      \"serial\": \"{{serialno}}\",\r\n      \"nodeId\": \"{{node}}\",\r\n      \"name\": \"{{nodename}}\",\r\n      \"rn\": \"nodep-{{serialno}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/controller/nodeidentpol/nodep-{{serialno}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"controller",
								"nodeidentpol",
								"nodep-{{serialno}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "static oob ip assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mgmtRsOoBStNode\": {\r\n        \"attributes\": {\r\n            \"tDn\": \"topology/pod-{{podId}}/node-{{node}}\",\r\n            \"addr\": \"{{oobipaddr}}\",\r\n            \"gw\": \"{{oobgateway}}\",\r\n            \"status\": \"created\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-{{podId}}/node-{{node}}].json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-mgmt",
								"mgmtp-default",
								"oob-default",
								"rsooBStNode-[topology",
								"pod-{{podId}}",
								"node-{{node}}].json"
							]
						}
					},
					"response": []
				},
				{
					"name": "static inband ip assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mgmtRsInBStNode\": {\r\n        \"attributes\": {\r\n            \"tDn\": \"topology/pod-{{podId}}/node-{{node}}\",\r\n            \"addr\": \"{{inbipaddr}}\",\r\n            \"gw\": \"{{inbgateway}}\",\r\n            \"status\": \"created\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-mgmt/mgmtp-default/inb-default/rsinBStNode-[topology/pod-{{podId}}/node-{{node}}].json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-mgmt",
								"mgmtp-default",
								"inb-default",
								"rsinBStNode-[topology",
								"pod-{{podId}}",
								"node-{{node}}].json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Switch Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraNodeP\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/nprof-{{sw_prof_name}}\",\r\n      \"name\": \"{{sw_prof_name}}\",\r\n      \"descr\": \"{{sw_prof_descr}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bind Switch Selector to Switch Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraLeafS\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/nprof-{{sw_prof_name}}/leaves-{{sw_sel_name}}-typ-range\",\r\n      \"type\": \"range\",\r\n      \"name\": \"{{sw_sel_name}}\",\r\n      \"status\": \"created\"\r\n    },\r\n    \"children\": [\r\n      {\r\n        \"infraNodeBlk\": {\r\n          \"attributes\": {\r\n            \"from_\": \"{{NodeBlkfrom}}\",\r\n            \"to_\": \"{{NodeBlkto}}\",\r\n            \"name\": \"{{sw_sel_name}}\",\r\n            \"status\": \"created\"\r\n          },\r\n          \"children\": []\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}/leaves-{{sw_sel_name}}-typ-range.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}",
								"leaves-{{sw_sel_name}}-typ-range.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Interface Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraAccPortP\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/infra/accportprof-{{int_prof_name}}\",\r\n      \"name\": \"{{int_prof_name}}\",\r\n      \"descr\": \"{{int_prof_descr}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/accportprof-{{int_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"accportprof-{{int_prof_name}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bind interface profile to switch profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"infraRsAccPortP\": {\r\n    \"attributes\": {\r\n      \"tDn\": \"uni/infra/accportprof-{{int_prof_name}}\",\r\n      \"status\": \"created,modified\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/nprof-{{sw_prof_name}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"nprof-{{sw_prof_name}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. VPC Explicit Grp",
			"item": [
				{
					"name": "Login-json-aaa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonData.imdata[0].aaaLogin.attributes.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aaaUser\": {\r\n    \"attributes\": {\r\n      \"name\": \"{{username}}\",\r\n      \"pwd\": \"{{password}}\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/aaaLogin.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"aaaLogin.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create VPC Explicit Grp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fabricExplicitGEp\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/fabric/protpol/expgep-{{vpcexplicitgrp}}\",\r\n            \"name\": \"{{vpcexplicitgrp}}\",\r\n            \"id\": \"{{vpcnode}}\",\r\n            \"rn\": \"expgep-{{vpcexplicitgrp}}\",\r\n            \"status\": \"created\"\r\n        },\r\n        \"children\": [\r\n            {\r\n                \"fabricNodePEp\": {\r\n                    \"attributes\": {\r\n                        \"dn\": \"uni/fabric/protpol/expgep-{{vpcexplicitgrp}}/nodepep-{{node1}}\",\r\n                        \"id\": \"{{node1}}\",\r\n                        \"status\": \"created\",\r\n                        \"rn\": \"nodepep-{{node1}}\"\r\n                    },\r\n                    \"children\": []\r\n                }\r\n            },\r\n            {\r\n                \"fabricNodePEp\": {\r\n                    \"attributes\": {\r\n                        \"dn\": \"uni/fabric/protpol/expgep-{{vpcexplicitgrp}}/nodepep-{{node2}}\",\r\n                        \"id\": \"{{node2}}\",\r\n                        \"status\": \"created\",\r\n                        \"rn\": \"nodepep-{{node2}}\"\r\n                    },\r\n                    \"children\": []\r\n                }\r\n            },\r\n        }\r\n    }\r\n]\r\n}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/fabric/protpol/expgep-{{vpcexplicitgrp}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"fabric",
								"protpol",
								"expgep-{{vpcexplicitgrp}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete VPC Explicit Grp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fabricExplicitGEp\": {\r\n    \"attributes\": {\r\n      \"dn\": \"uni/fabric/protpol/expgep-{{vpcexplicitgrp}}\",\r\n      \"status\": \"deleted\"\r\n    },\r\n    \"children\": []\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/fabric/protpol/expgep-{{vpcexplicitgrp}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"fabric",
								"protpol",
								"expgep-{{vpcexplicitgrp}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. L3out Route Addition Deletion",
			"item": [
				{
					"name": "Login-json-aaa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonData.imdata[0].aaaLogin.attributes.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aaaUser\": {\r\n    \"attributes\": {\r\n      \"name\": \"{{username}}\",\r\n      \"pwd\": \"{{password}}\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/api/aaaLogin.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"aaaLogin.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Static Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ipRouteP\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/tn-{{tenant}}/out-{{l3out}}/lnodep-{{l3outnp}}/rsnodeL3OutAtt-[topology/pod-{{pod}}/node-{{node}}]/rt-[{{route}}]\",\r\n            \"ip\": \"{{route}}\",\r\n            \"rn\": \"rt-[{{route}}]\",\r\n            \"status\": \"created\"\r\n        },\r\n        \"children\": [\r\n            {\r\n                \"ipNexthopP\": {\r\n                    \"attributes\": {\r\n                        \"dn\": \"uni/tn-{{tenant}}/out-{{l3out}}/lnodep-{{l3outnp}}/rsnodeL3OutAtt-[topology/pod-{{pod}}/node-{{node}}]/rt-[{{route}}]/nh-[{{nhAddr}}]\",\r\n                        \"nhAddr\": \"{{nhAddr}}\",\r\n                        \"rn\": \"nh-[{{nhAddr}}]\",\r\n                        \"status\": \"created\"\r\n                    },\r\n                    \"children\": []\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/out-{{l3out}}/lnodep-{{l3outnp}}/rsnodeL3OutAtt-[topology/pod-{{pod}}/node-{{node}}]/rt-[{{route}}].json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"out-{{l3out}}",
								"lnodep-{{l3outnp}}",
								"rsnodeL3OutAtt-[topology",
								"pod-{{pod}}",
								"node-{{node}}]",
								"rt-[{{route}}].json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Static Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ipRouteP\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/tn-{{tenant}}/out-{{l3out}}/lnodep-{{l3outnp}}/rsnodeL3OutAtt-[topology/pod-{{pod}}/node-{{node}}]/rt-[{{route}}]\",\r\n            \"status\": \"deleted\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/out-{{l3out}}/lnodep-{{l3outnp}}/rsnodeL3OutAtt-[topology/pod-{{pod}}/node-{{node}}]/rt-[{{route}}].json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"out-{{l3out}}",
								"lnodep-{{l3outnp}}",
								"rsnodeL3OutAtt-[topology",
								"pod-{{pod}}",
								"node-{{node}}]",
								"rt-[{{route}}].json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11. PTP Enablement",
			"item": [
				{
					"name": "Create PTP Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ptpProfile\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/infra/ptpprofile-{{ptpprofile}}\",\r\n            \"name\": \"{{ptpprofile}}\",\r\n            \"rn\": \"ptpprofile-{{ptpprofile}}\",\r\n            \"status\": \"created\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/infra/ptpprofile-{{ptpprofile}}.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"infra",
								"ptpprofile-{{ptpprofile}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable PTP on Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ptpEpgCfg\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg\",\r\n            \"srcIp\": \"{{oobip}}\",\r\n            \"status\": \"created,modified\",\r\n            \"rn\": \"ptpEpgCfg\"\r\n        },\r\n        \"children\": [\r\n            {\r\n                \"ptpRsProfile\": {\r\n                    \"attributes\": {\r\n                        \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg/rsprofile\",\r\n                        \"tDn\": \"uni/infra/ptpprofile-{{ptpprofile}}\",\r\n                        \"status\": \"created,modified\",\r\n                        \"rn\": \"rsprofile\"\r\n                    },\r\n                    \"children\": []\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"ap-{{anp}}",
								"epg-{{epg}}",
								"rspathAtt-[topology",
								"pod-{{pod}}",
								"paths-{{node}}",
								"pathep-[eth{{port}}]]",
								"ptpEpgCfg.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable PTP on Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ptpEpgCfg\": {\r\n        \"attributes\": {\r\n            \"dn\": \"uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg\",\r\n            \"status\": \"deleted\"\r\n        },\r\n        \"children\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"ap-{{anp}}",
								"epg-{{epg}}",
								"rspathAtt-[topology",
								"pod-{{pod}}",
								"paths-{{node}}",
								"pathep-[eth{{port}}]]",
								"ptpEpgCfg.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PTP Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/api/node/mo/uni/tn-{{tenant}}/ap-{{anp}}/epg-{{epg}}/rspathAtt-[topology/pod-{{pod}}/paths-{{node}}/pathep-[eth{{port}}]]/ptpEpgCfg.json",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"node",
								"mo",
								"uni",
								"tn-{{tenant}}",
								"ap-{{anp}}",
								"epg-{{epg}}",
								"rspathAtt-[topology",
								"pod-{{pod}}",
								"paths-{{node}}",
								"pathep-[eth{{port}}]]",
								"ptpEpgCfg.json"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}